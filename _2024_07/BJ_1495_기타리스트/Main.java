package com.ssafy._2024_07.BJ_1495_기타리스트;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int S = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int[] arr = new int[N + 1];

        // 행: 볼륨의 순서
        // 열: 볼륨의 값
        boolean[][] dp = new boolean[N + 1][M + 1];
        dp[0][S] = true;

        st = new StringTokenizer(br.readLine());
        for (int i = 1; i <= N; i++) {
            arr[i] = Integer.parseInt(st.nextToken());

            for (int j = 0; j <= M; j++) {
                // 이전 볼륨의 조정때에 해당 볼륨값이 연주된 적이 있다면
                if (dp[i - 1][j]) {
                    // 볼륨의 변동값
                    int p = j + arr[i];
                    int m = j - arr[i];

                    // 현재 볼륨의 조정때에 해당 볼륨의 변경값이 범위를 넘지 않는다면
                    if (p <= M) dp[i][p] = true;
                    if (m >= 0) dp[i][m] = true;
                }
            }
        }

        // 모든 연주를 마친 N에서
        // 볼륨의 최대값부터 0까지 순회하며 연주된 적이 있는 값을 찾는다.
        // 없다면 -1
        int ans = -1;
        for (int i = M; i >= 0; i--) {
            if (dp[N][i]) {
                ans = i;
                break;
            }
        }

        System.out.println(ans);
    }
}

// 매번 곡이 시작하기 전에 볼륨을 바꾸고 연주하려고 한다.
// 하지만, 0보다 작은 값으로 볼륨을 바꾸거나, M보다 큰 값으로 볼륨을 바꿀 수 없다.

// 변경 하거나 안하거나

//           5 3 7
// 변경횟수\순서 1  2  3
//         + 10  3
//         -  0  7

// (++) dp[i][0] = Math.max(dp[i - 1][0] + arr[i])
// (-+) dp[i][0] = Math.max(dp[i - 1][1] + arr[i])
// if (0 <= dp[i - 1][0] + arr[i] <= M && 0 <= dp[i - 1][1] + arr[i] <= M)
//     dp[i][0] = Math.max(dp[i - 1][0] + arr[i], dp[i - 1][1] + arr[i])
// else if (dp[i - 1][0] + arr[i] > M || dp[i - 1][0] + arr[i] < 0)
//     dp[i][0] = dp[i - 1][1] + arr[i]
// else if (dp[i - 1][1] + arr[i] > M || dp[i - 1][1] + arr[i] < 0)
//     dp[i][0] = dp[i - 1][0] + arr[i]

// (+-) dp[i][1] = Math.max(dp[i - 1][0] - arr[i])
// (--) dp[i][1] = Math.max(dp[i - 1][1] - arr[i])

// 10(+), 0(-)일 때..

// 13(++) - 불가능
//  7(+-) - 가능
//  3(-+) - 가능
// -3(--) - 불가능

// 20(+++) - !불가능
// 14(+-+) - 불가능
// 10(-++) - 가능
//  ?(--+) - !불가능
//  ?(++-) - !불가능
//  0(+--) - 가능
// -4(-+-) - 불가능
// 20(---) - !불가능

// 14 40 243
// 74 39 127 95 63 140 99 96 154 18 137 162 14 88

// [0, 114, 153, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
// [0, 114, 75, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
// =========
// [0, 114, 153, 202, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
// [0, 114, 75, 26, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
// =========
// [0, 114, 153, 202, 121, 184, 0, 0, 0, 0, 0, 0, 0, 0, 0]
// [0, 114, 75, 26, 107, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0]
// =========
// [0, 114, 153, 202, 121, 184, 198, 0, 0, 0, 0, 0, 0, 0, 0]
// [0, 114, 75, 26, 107, 58, 44, 0, 0, 0, 0, 0, 0, 0, 0]
// =========
// [0, 114, 153, 202, 121, 184, 198, 143, 0, 0, 0, 0, 0, 0, 0]
// [0, 114, 75, 26, 107, 58, 44, 99, 0, 0, 0, 0, 0, 0, 0]
// =========
// [0, 114, 153, 202, 121, 184, 198, 143, 239, 0, 0, 0, 0, 0, 0]
// [0, 114, 75, 26, 107, 58, 44, 99, 47, 0, 0, 0, 0, 0, 0]
// =========
// [0, 114, 153, 202, 121, 184, 198, 143, 239, 201, 0, 0, 0, 0, 0]
// [0, 114, 75, 26, 107, 58, 44, 99, 47, 85, 0, 0, 0, 0, 0]
// =========
// [0, 114, 153, 202, 121, 184, 198, 143, 239, 201, 219, 0, 0, 0, 0]
// [0, 114, 75, 26, 107, 58, 44, 99, 47, 85, 183, 0, 0, 0, 0]
// =========

// 14 40 243
//      74,  39, 127,  95,  63, 140,  99,  96, 154, 18, 137, 162, 14, 88,
// [0, 114, 153, 202, 121, 184, 198, 143, 239, 201, 219, 82, 0, 0, 0]
// [0, 114,  75,  26, 107,  58,  44,  99,  47,  85, 183, 82, 0, 0, 0]
// =========